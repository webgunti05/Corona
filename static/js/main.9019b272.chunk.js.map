{"version":3,"sources":["logo/covid19_logo.png","services/globalService.js","components/subpages/cards.js","components/subpages/countrywidedata.js","components/subpages/countriesSelect.js","components/globaldata.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getGlobalData","a","fetch","method","headers","response","json","data","console","log","getEffectedCountries","EffectedCountrydata","getCasesByCountry","keyword","DataUrl","Cards","totalInfo","getDataCOuntry","bgColor","blk","grn","red","cData","latest_stat_by_country","Fragment","Container","Row","Col","xs","sm","md","style","marginBottom","Card","body","inverse","backgroundColor","CardTitle","total_cases","fontWeight","CardText","total_deaths","total_recovered","active_cases","marginLeft","new_deaths","color","serious_critical","CountryWideData","clr","textTransform","fontSize","country","CountriesSelect","effectCountrys","changeCountry","totalEffectCountries","affected_countries","Form","margin","maxWidth","marginRight","FormGroup","Input","type","name","id","onChange","e","target","value","filter","sort","b","map","key","GlobalData","useState","globData","setGlobData","effectedCountries","setEffectedCountries","searchParam","setSearchParam","setData","setClr","setBgColor","setBlk","setGrn","setRed","useEffect","gbData","getUniverseData","dtByCountries","getDatabyCountries","clrCode","Math","floor","random","clrCode2","clrCode3","clrCode4","getDta","App","className","src","covidLogo","alt","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9019b272.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid19_logo.8fd8852e.png\";","export const getGlobalData = async () => {\r\n  const GlobalDataUrl =\r\n    \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\";\r\n  try {\r\n    const response = await fetch(GlobalDataUrl, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"Application/json\",\r\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"f42ec5466amsh0c4fd6102b9c383p11959ajsn55f4ab60a841\",\r\n      },\r\n    });\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getEffectedCountries = async () => {\r\n  const effetedCountryUrl =\r\n    \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/affected.php\";\r\n  try {\r\n    const response = await fetch(effetedCountryUrl, {\r\n      method: \"Get\",\r\n      headers: {\r\n        \"Content-type\": \"Application/json\",\r\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"f42ec5466amsh0c4fd6102b9c383p11959ajsn55f4ab60a841\",\r\n      },\r\n    });\r\n    const EffectedCountrydata = await response.json();\r\n    return EffectedCountrydata;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getCasesByCountry = async ({ keyword }) => {\r\n  try {\r\n    let DataUrl = `https://coronavirus-monitor.p.rapidapi.com/coronavirus/latest_stat_by_country.php/?`;\r\n    DataUrl += `country=${keyword}`;\r\n    const response = await fetch(DataUrl, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-type\": \"Application/json\",\r\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"f42ec5466amsh0c4fd6102b9c383p11959ajsn55f4ab60a841\",\r\n      },\r\n    });\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Container, Row, Col, Card, CardTitle, CardText } from \"reactstrap\";\r\n\r\nconst Cards = ({ totalInfo, getDataCOuntry, bgColor, blk, grn, red }) => {\r\n  const cData = getDataCOuntry.latest_stat_by_country;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Row>\r\n          <Col xs=\"12\" sm=\"6\" md=\"3\" style={{ marginBottom: \"10px\" }}>\r\n            <Card body inverse style={{ backgroundColor: `${bgColor}` }}>\r\n              <CardTitle>\r\n                <h5>Total Cases</h5>\r\n              </CardTitle>\r\n              {cData && cData[0].total_cases === \"\" && (\r\n                <span style={{ fontWeight: \"bold\" }}>0</span>\r\n              )}\r\n              <CardText style={{ fontWeight: \"bold\" }}>\r\n                {cData ? cData[0].total_cases : totalInfo.total_cases}\r\n              </CardText>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col xs=\"12\" sm=\"6\" md=\"3\" style={{ marginBottom: \"10px\" }}>\r\n            <Card body inverse style={{ backgroundColor: `${blk}` }}>\r\n              <CardTitle>\r\n                <h5>Total Deaths</h5>\r\n              </CardTitle>\r\n              {cData && cData[0].total_deaths === \"\" && (\r\n                <span style={{ fontWeight: \"bold\" }}>0</span>\r\n              )}\r\n              <CardText style={{ fontWeight: \"bold\" }}>\r\n                {cData ? cData[0].total_deaths : totalInfo.total_deaths}\r\n              </CardText>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col xs=\"12\" sm=\"6\" md=\"3\" style={{ marginBottom: \"10px\" }}>\r\n            <Card body inverse style={{ backgroundColor: `${grn}` }}>\r\n              <CardTitle>\r\n                <h5>Total Recovered</h5>\r\n              </CardTitle>\r\n              {cData && cData[0].total_recovered === \"\" && (\r\n                <span style={{ fontWeight: \"bold\" }}>0</span>\r\n              )}\r\n              <CardText style={{ fontWeight: \"bold\" }}>\r\n                {cData ? cData[0].total_recovered : totalInfo.total_recovered}\r\n              </CardText>\r\n            </Card>\r\n          </Col>\r\n\r\n          <Col xs=\"12\" sm=\"6\" md=\"3\" style={{ marginBottom: \"10px\" }}>\r\n            <Card body inverse style={{ backgroundColor: `${red}` }}>\r\n              <CardTitle>\r\n                <h5>Acive Cases</h5>\r\n              </CardTitle>\r\n              {cData && cData[0].active_cases === \"\" && (\r\n                <span style={{ fontWeight: \"bold\" }}>0</span>\r\n              )}\r\n              <CardText style={{ fontWeight: \"bold\" }}>\r\n                {cData ? cData[0].active_cases : totalInfo.active_cases}\r\n              </CardText>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <hr />\r\n        <Row>\r\n          <h5 style={{ fontWeight: \"bold\", marginLeft: \"15px\" }}>\r\n            New Deaths : {cData && cData[0].new_deaths === \"\" && <span>0</span>}\r\n            <span style={{ color: \"red\" }}>\r\n              {cData ? cData[0].new_deaths : totalInfo.new_deaths}\r\n            </span>\r\n          </h5>\r\n          <h5 style={{ fontWeight: \"bold\", marginLeft: \"15px\" }}>\r\n            Serious Critical:\r\n            {cData && cData[0].serious_critical === \"\" && <span>0</span>}\r\n            <span style={{ color: \"red\" }}>\r\n              {cData ? cData[0].serious_critical : totalInfo.serious_critical}\r\n            </span>\r\n          </h5>\r\n        </Row>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\n\r\nconst CountryWideData = ({ getDataCOuntry, clr }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <h1\r\n          style={{\r\n            textTransform: \"uppercase\",\r\n            color: `${clr}`,\r\n            fontSize: \"24px\",\r\n            fontWeight: \"bold\",\r\n            marginBottom: \"15px\",\r\n          }}\r\n        >\r\n          {getDataCOuntry.country\r\n            ? `${getDataCOuntry.country} - Cases `\r\n            : \"Global - Cases\"}\r\n        </h1>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CountryWideData;\r\n","import React from \"react\";\r\nimport CountryWideData from \"../subpages/countrywidedata\";\r\nimport { Container, Row, Col, Form, FormGroup, Input } from \"reactstrap\";\r\n\r\nconst CountriesSelect = ({\r\n  effectCountrys,\r\n  changeCountry,\r\n  getDataCOuntry,\r\n  clr,\r\n}) => {\r\n  let totalEffectCountries = [];\r\n  totalEffectCountries = effectCountrys.affected_countries;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <Form\r\n              style={{\r\n                margin: \"20px\",\r\n                maxWidth: \"300px\",\r\n                marginLeft: \"auto\",\r\n                marginRight: \"auto\",\r\n              }}\r\n            >\r\n              <FormGroup>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"select\"\r\n                  id=\"exampleSelect\"\r\n                  onChange={(e) => changeCountry(e.target.value)}\r\n                >\r\n                  <option value=\"\">Select Country</option>\r\n                  {totalEffectCountries &&\r\n                    totalEffectCountries\r\n                      .filter((country) => country !== \"\")\r\n                      .sort((a, b) => {\r\n                        if (a < b) return -1;\r\n                        if (a > b) return 1;\r\n                        return 0;\r\n                      })\r\n                      .map((country) => (\r\n                        <option key={country} value={country}>\r\n                          {country}\r\n                        </option>\r\n                      ))}\r\n                </Input>\r\n              </FormGroup>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <CountryWideData getDataCOuntry={getDataCOuntry} clr={clr} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CountriesSelect;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  getGlobalData,\r\n  getEffectedCountries,\r\n  getCasesByCountry,\r\n} from \"../services/globalService\";\r\nimport Cards from \"../components/subpages/cards\";\r\nimport CountriesSelect from \"../components/subpages/countriesSelect\";\r\n\r\nconst GlobalData = () => {\r\n  const [globData, setGlobData] = useState({});\r\n  const [effectedCountries, setEffectedCountries] = useState([]);\r\n  const [searchParam, setSearchParam] = useState({\r\n    keyword: \"\",\r\n  });\r\n  const [data, setData] = useState({});\r\n  const [clr, setClr] = useState(\"red\");\r\n  const [bgColor, setBgColor] = useState(\"#007bff\");\r\n  const [blk, setBlk] = useState(\"#000000\");\r\n  const [grn, setGrn] = useState(\"#28a745\");\r\n  const [red, setRed] = useState(\"#ff0000\");\r\n\r\n  //Tptol cases by world wide\r\n  useEffect(() => {\r\n    const getUniverseData = async () => {\r\n      const gbData = await getGlobalData();\r\n      setGlobData(gbData);\r\n    };\r\n\r\n    getUniverseData();\r\n  }, []);\r\n\r\n  //Effected Countries\r\n  useEffect(() => {\r\n    const getDatabyCountries = async () => {\r\n      const dtByCountries = await getEffectedCountries();\r\n      setEffectedCountries(dtByCountries);\r\n    };\r\n\r\n    getDatabyCountries();\r\n  }, []);\r\n\r\n  let clrCode =\r\n    \"rgb(\" +\r\n    Math.floor(Math.random() * 256) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 256) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 256) +\r\n    \")\";\r\n\r\n  let clrCode2 =\r\n    \"rgb(\" +\r\n    Math.floor(Math.random() * 255) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 255) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 255) +\r\n    \")\";\r\n\r\n  let clrCode3 =\r\n    \"rgb(\" +\r\n    Math.floor(Math.random() * 200) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 200) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 200) +\r\n    \")\";\r\n\r\n  let clrCode4 =\r\n    \"rgb(\" +\r\n    Math.floor(Math.random() * 100) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 100) +\r\n    \",\" +\r\n    Math.floor(Math.random() * 100) +\r\n    \")\";\r\n\r\n  const changeCountry = async (country) => {\r\n    searchParam.keyword = country;\r\n\r\n    setSearchParam(searchParam);\r\n    setClr(clrCode);\r\n    setBgColor(clrCode);\r\n    setBlk(clrCode2);\r\n    setGrn(clrCode3);\r\n    setRed(clrCode4);\r\n    const getDta = await getCasesByCountry(searchParam);\r\n    setData(getDta);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CountriesSelect\r\n        effectCountrys={effectedCountries}\r\n        changeCountry={changeCountry}\r\n        getDataCOuntry={data}\r\n        clr={clr}\r\n      />\r\n      <Cards\r\n        totalInfo={globData}\r\n        getDataCOuntry={data}\r\n        bgColor={bgColor}\r\n        blk={blk}\r\n        grn={grn}\r\n        red={red}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GlobalData;\r\n","import React from \"react\";\nimport covidLogo from \"./logo/covid19_logo.png\";\nimport GlobalData from \"./components/globaldata\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img className=\"covidLogo\" src={covidLogo} alt=\"Devil\" title=\"Devil\" />\n      <GlobalData />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}